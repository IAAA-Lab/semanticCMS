/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.docs.datosGob.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.docs.datosGob.model.Descripcion;
import com.liferay.docs.datosGob.model.DescripcionModel;
import com.liferay.docs.datosGob.model.DescripcionSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.petra.string.StringBundler;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Descripcion service. Represents a row in the &quot;DB_Descripcion&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link DescripcionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DescripcionImpl}.
 * </p>
 *
 * @author liferay
 * @see DescripcionImpl
 * @see Descripcion
 * @see DescripcionModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class DescripcionModelImpl extends BaseModelImpl<Descripcion>
	implements DescripcionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a descripcion model instance should use the {@link Descripcion} interface instead.
	 */
	public static final String TABLE_NAME = "DB_Descripcion";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "groupId", Types.BIGINT },
			{ "descripcionId", Types.BIGINT },
			{ "descripcion", Types.VARCHAR },
			{ "datasetId", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("descripcionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("descripcion", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("datasetId", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table DB_Descripcion (uuid_ VARCHAR(75) null,groupId LONG,descripcionId LONG not null primary key,descripcion VARCHAR(75) null,datasetId VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table DB_Descripcion";
	public static final String ORDER_BY_JPQL = " ORDER BY descripcion.descripcionId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY DB_Descripcion.descripcionId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.docs.datosGob.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.docs.datosGob.model.Descripcion"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.docs.datosGob.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.docs.datosGob.model.Descripcion"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.docs.datosGob.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.docs.datosGob.model.Descripcion"),
			true);
	public static final long DATASETID_COLUMN_BITMASK = 1L;
	public static final long GROUPID_COLUMN_BITMASK = 2L;
	public static final long UUID_COLUMN_BITMASK = 4L;
	public static final long DESCRIPCIONID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Descripcion toModel(DescripcionSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Descripcion model = new DescripcionImpl();

		model.setUuid(soapModel.getUuid());
		model.setGroupId(soapModel.getGroupId());
		model.setDescripcionId(soapModel.getDescripcionId());
		model.setDescripcion(soapModel.getDescripcion());
		model.setDatasetId(soapModel.getDatasetId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Descripcion> toModels(DescripcionSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Descripcion> models = new ArrayList<Descripcion>(soapModels.length);

		for (DescripcionSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.docs.datosGob.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.docs.datosGob.model.Descripcion"));

	public DescripcionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _descripcionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDescripcionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _descripcionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Descripcion.class;
	}

	@Override
	public String getModelClassName() {
		return Descripcion.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("groupId", getGroupId());
		attributes.put("descripcionId", getDescripcionId());
		attributes.put("descripcion", getDescripcion());
		attributes.put("datasetId", getDatasetId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long descripcionId = (Long)attributes.get("descripcionId");

		if (descripcionId != null) {
			setDescripcionId(descripcionId);
		}

		String descripcion = (String)attributes.get("descripcion");

		if (descripcion != null) {
			setDescripcion(descripcion);
		}

		String datasetId = (String)attributes.get("datasetId");

		if (datasetId != null) {
			setDatasetId(datasetId);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getDescripcionId() {
		return _descripcionId;
	}

	@Override
	public void setDescripcionId(long descripcionId) {
		_descripcionId = descripcionId;
	}

	@JSON
	@Override
	public String getDescripcion() {
		if (_descripcion == null) {
			return "";
		}
		else {
			return _descripcion;
		}
	}

	@Override
	public void setDescripcion(String descripcion) {
		_descripcion = descripcion;
	}

	@JSON
	@Override
	public String getDatasetId() {
		if (_datasetId == null) {
			return "";
		}
		else {
			return _datasetId;
		}
	}

	@Override
	public void setDatasetId(String datasetId) {
		_columnBitmask |= DATASETID_COLUMN_BITMASK;

		if (_originalDatasetId == null) {
			_originalDatasetId = _datasetId;
		}

		_datasetId = datasetId;
	}

	public String getOriginalDatasetId() {
		return GetterUtil.getString(_originalDatasetId);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Descripcion.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Descripcion toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Descripcion)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DescripcionImpl descripcionImpl = new DescripcionImpl();

		descripcionImpl.setUuid(getUuid());
		descripcionImpl.setGroupId(getGroupId());
		descripcionImpl.setDescripcionId(getDescripcionId());
		descripcionImpl.setDescripcion(getDescripcion());
		descripcionImpl.setDatasetId(getDatasetId());

		descripcionImpl.resetOriginalValues();

		return descripcionImpl;
	}

	@Override
	public int compareTo(Descripcion descripcion) {
		long primaryKey = descripcion.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Descripcion)) {
			return false;
		}

		Descripcion descripcion = (Descripcion)obj;

		long primaryKey = descripcion.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		DescripcionModelImpl descripcionModelImpl = this;

		descripcionModelImpl._originalUuid = descripcionModelImpl._uuid;

		descripcionModelImpl._originalGroupId = descripcionModelImpl._groupId;

		descripcionModelImpl._setOriginalGroupId = false;

		descripcionModelImpl._originalDatasetId = descripcionModelImpl._datasetId;

		descripcionModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Descripcion> toCacheModel() {
		DescripcionCacheModel descripcionCacheModel = new DescripcionCacheModel();

		descripcionCacheModel.uuid = getUuid();

		String uuid = descripcionCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			descripcionCacheModel.uuid = null;
		}

		descripcionCacheModel.groupId = getGroupId();

		descripcionCacheModel.descripcionId = getDescripcionId();

		descripcionCacheModel.descripcion = getDescripcion();

		String descripcion = descripcionCacheModel.descripcion;

		if ((descripcion != null) && (descripcion.length() == 0)) {
			descripcionCacheModel.descripcion = null;
		}

		descripcionCacheModel.datasetId = getDatasetId();

		String datasetId = descripcionCacheModel.datasetId;

		if ((datasetId != null) && (datasetId.length() == 0)) {
			descripcionCacheModel.datasetId = null;
		}

		return descripcionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", descripcionId=");
		sb.append(getDescripcionId());
		sb.append(", descripcion=");
		sb.append(getDescripcion());
		sb.append(", datasetId=");
		sb.append(getDatasetId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.liferay.docs.datosGob.model.Descripcion");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>descripcionId</column-name><column-value><![CDATA[");
		sb.append(getDescripcionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>descripcion</column-name><column-value><![CDATA[");
		sb.append(getDescripcion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>datasetId</column-name><column-value><![CDATA[");
		sb.append(getDatasetId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Descripcion.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Descripcion.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _descripcionId;
	private String _descripcion;
	private String _datasetId;
	private String _originalDatasetId;
	private long _columnBitmask;
	private Descripcion _escapedModel;
}