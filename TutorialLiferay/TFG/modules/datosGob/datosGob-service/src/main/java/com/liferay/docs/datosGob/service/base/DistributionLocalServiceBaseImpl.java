/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.docs.datosGob.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.docs.datosGob.model.Distribution;
import com.liferay.docs.datosGob.service.DistributionLocalService;
import com.liferay.docs.datosGob.service.persistence.ColeccionPersistence;
import com.liferay.docs.datosGob.service.persistence.DatasetPersistence;
import com.liferay.docs.datosGob.service.persistence.DescripcionPersistence;
import com.liferay.docs.datosGob.service.persistence.DistributionPersistence;
import com.liferay.docs.datosGob.service.persistence.TituloPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the distribution local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.docs.datosGob.service.impl.DistributionLocalServiceImpl}.
 * </p>
 *
 * @author liferay
 * @see com.liferay.docs.datosGob.service.impl.DistributionLocalServiceImpl
 * @see com.liferay.docs.datosGob.service.DistributionLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class DistributionLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements DistributionLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.liferay.docs.datosGob.service.DistributionLocalServiceUtil} to access the distribution local service.
	 */

	/**
	 * Adds the distribution to the database. Also notifies the appropriate model listeners.
	 *
	 * @param distribution the distribution
	 * @return the distribution that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Distribution addDistribution(Distribution distribution) {
		distribution.setNew(true);

		return distributionPersistence.update(distribution);
	}

	/**
	 * Creates a new distribution with the primary key. Does not add the distribution to the database.
	 *
	 * @param distributionId the primary key for the new distribution
	 * @return the new distribution
	 */
	@Override
	@Transactional(enabled = false)
	public Distribution createDistribution(long distributionId) {
		return distributionPersistence.create(distributionId);
	}

	/**
	 * Deletes the distribution with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param distributionId the primary key of the distribution
	 * @return the distribution that was removed
	 * @throws PortalException if a distribution with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Distribution deleteDistribution(long distributionId)
		throws PortalException {
		return distributionPersistence.remove(distributionId);
	}

	/**
	 * Deletes the distribution from the database. Also notifies the appropriate model listeners.
	 *
	 * @param distribution the distribution
	 * @return the distribution that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Distribution deleteDistribution(Distribution distribution) {
		return distributionPersistence.remove(distribution);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(Distribution.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return distributionPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.docs.datosGob.model.impl.DistributionModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return distributionPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.docs.datosGob.model.impl.DistributionModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return distributionPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return distributionPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return distributionPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public Distribution fetchDistribution(long distributionId) {
		return distributionPersistence.fetchByPrimaryKey(distributionId);
	}

	/**
	 * Returns the distribution matching the UUID and group.
	 *
	 * @param uuid the distribution's UUID
	 * @param groupId the primary key of the group
	 * @return the matching distribution, or <code>null</code> if a matching distribution could not be found
	 */
	@Override
	public Distribution fetchDistributionByUuidAndGroupId(String uuid,
		long groupId) {
		return distributionPersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the distribution with the primary key.
	 *
	 * @param distributionId the primary key of the distribution
	 * @return the distribution
	 * @throws PortalException if a distribution with the primary key could not be found
	 */
	@Override
	public Distribution getDistribution(long distributionId)
		throws PortalException {
		return distributionPersistence.findByPrimaryKey(distributionId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(distributionLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(Distribution.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("distributionId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(distributionLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(Distribution.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"distributionId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(distributionLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(Distribution.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("distributionId");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return distributionLocalService.deleteDistribution((Distribution)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return distributionPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns the distribution matching the UUID and group.
	 *
	 * @param uuid the distribution's UUID
	 * @param groupId the primary key of the group
	 * @return the matching distribution
	 * @throws PortalException if a matching distribution could not be found
	 */
	@Override
	public Distribution getDistributionByUuidAndGroupId(String uuid,
		long groupId) throws PortalException {
		return distributionPersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the distributions.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.docs.datosGob.model.impl.DistributionModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of distributions
	 * @param end the upper bound of the range of distributions (not inclusive)
	 * @return the range of distributions
	 */
	@Override
	public List<Distribution> getDistributions(int start, int end) {
		return distributionPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of distributions.
	 *
	 * @return the number of distributions
	 */
	@Override
	public int getDistributionsCount() {
		return distributionPersistence.countAll();
	}

	/**
	 * Updates the distribution in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param distribution the distribution
	 * @return the distribution that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Distribution updateDistribution(Distribution distribution) {
		return distributionPersistence.update(distribution);
	}

	/**
	 * Returns the coleccion local service.
	 *
	 * @return the coleccion local service
	 */
	public com.liferay.docs.datosGob.service.ColeccionLocalService getColeccionLocalService() {
		return coleccionLocalService;
	}

	/**
	 * Sets the coleccion local service.
	 *
	 * @param coleccionLocalService the coleccion local service
	 */
	public void setColeccionLocalService(
		com.liferay.docs.datosGob.service.ColeccionLocalService coleccionLocalService) {
		this.coleccionLocalService = coleccionLocalService;
	}

	/**
	 * Returns the coleccion persistence.
	 *
	 * @return the coleccion persistence
	 */
	public ColeccionPersistence getColeccionPersistence() {
		return coleccionPersistence;
	}

	/**
	 * Sets the coleccion persistence.
	 *
	 * @param coleccionPersistence the coleccion persistence
	 */
	public void setColeccionPersistence(
		ColeccionPersistence coleccionPersistence) {
		this.coleccionPersistence = coleccionPersistence;
	}

	/**
	 * Returns the dataset local service.
	 *
	 * @return the dataset local service
	 */
	public com.liferay.docs.datosGob.service.DatasetLocalService getDatasetLocalService() {
		return datasetLocalService;
	}

	/**
	 * Sets the dataset local service.
	 *
	 * @param datasetLocalService the dataset local service
	 */
	public void setDatasetLocalService(
		com.liferay.docs.datosGob.service.DatasetLocalService datasetLocalService) {
		this.datasetLocalService = datasetLocalService;
	}

	/**
	 * Returns the dataset persistence.
	 *
	 * @return the dataset persistence
	 */
	public DatasetPersistence getDatasetPersistence() {
		return datasetPersistence;
	}

	/**
	 * Sets the dataset persistence.
	 *
	 * @param datasetPersistence the dataset persistence
	 */
	public void setDatasetPersistence(DatasetPersistence datasetPersistence) {
		this.datasetPersistence = datasetPersistence;
	}

	/**
	 * Returns the descripcion local service.
	 *
	 * @return the descripcion local service
	 */
	public com.liferay.docs.datosGob.service.DescripcionLocalService getDescripcionLocalService() {
		return descripcionLocalService;
	}

	/**
	 * Sets the descripcion local service.
	 *
	 * @param descripcionLocalService the descripcion local service
	 */
	public void setDescripcionLocalService(
		com.liferay.docs.datosGob.service.DescripcionLocalService descripcionLocalService) {
		this.descripcionLocalService = descripcionLocalService;
	}

	/**
	 * Returns the descripcion persistence.
	 *
	 * @return the descripcion persistence
	 */
	public DescripcionPersistence getDescripcionPersistence() {
		return descripcionPersistence;
	}

	/**
	 * Sets the descripcion persistence.
	 *
	 * @param descripcionPersistence the descripcion persistence
	 */
	public void setDescripcionPersistence(
		DescripcionPersistence descripcionPersistence) {
		this.descripcionPersistence = descripcionPersistence;
	}

	/**
	 * Returns the distribution local service.
	 *
	 * @return the distribution local service
	 */
	public DistributionLocalService getDistributionLocalService() {
		return distributionLocalService;
	}

	/**
	 * Sets the distribution local service.
	 *
	 * @param distributionLocalService the distribution local service
	 */
	public void setDistributionLocalService(
		DistributionLocalService distributionLocalService) {
		this.distributionLocalService = distributionLocalService;
	}

	/**
	 * Returns the distribution persistence.
	 *
	 * @return the distribution persistence
	 */
	public DistributionPersistence getDistributionPersistence() {
		return distributionPersistence;
	}

	/**
	 * Sets the distribution persistence.
	 *
	 * @param distributionPersistence the distribution persistence
	 */
	public void setDistributionPersistence(
		DistributionPersistence distributionPersistence) {
		this.distributionPersistence = distributionPersistence;
	}

	/**
	 * Returns the titulo local service.
	 *
	 * @return the titulo local service
	 */
	public com.liferay.docs.datosGob.service.TituloLocalService getTituloLocalService() {
		return tituloLocalService;
	}

	/**
	 * Sets the titulo local service.
	 *
	 * @param tituloLocalService the titulo local service
	 */
	public void setTituloLocalService(
		com.liferay.docs.datosGob.service.TituloLocalService tituloLocalService) {
		this.tituloLocalService = tituloLocalService;
	}

	/**
	 * Returns the titulo persistence.
	 *
	 * @return the titulo persistence
	 */
	public TituloPersistence getTituloPersistence() {
		return tituloPersistence;
	}

	/**
	 * Sets the titulo persistence.
	 *
	 * @param tituloPersistence the titulo persistence
	 */
	public void setTituloPersistence(TituloPersistence tituloPersistence) {
		this.tituloPersistence = tituloPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("com.liferay.docs.datosGob.model.Distribution",
			distributionLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"com.liferay.docs.datosGob.model.Distribution");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return DistributionLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return Distribution.class;
	}

	protected String getModelClassName() {
		return Distribution.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = distributionPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.liferay.docs.datosGob.service.ColeccionLocalService.class)
	protected com.liferay.docs.datosGob.service.ColeccionLocalService coleccionLocalService;
	@BeanReference(type = ColeccionPersistence.class)
	protected ColeccionPersistence coleccionPersistence;
	@BeanReference(type = com.liferay.docs.datosGob.service.DatasetLocalService.class)
	protected com.liferay.docs.datosGob.service.DatasetLocalService datasetLocalService;
	@BeanReference(type = DatasetPersistence.class)
	protected DatasetPersistence datasetPersistence;
	@BeanReference(type = com.liferay.docs.datosGob.service.DescripcionLocalService.class)
	protected com.liferay.docs.datosGob.service.DescripcionLocalService descripcionLocalService;
	@BeanReference(type = DescripcionPersistence.class)
	protected DescripcionPersistence descripcionPersistence;
	@BeanReference(type = DistributionLocalService.class)
	protected DistributionLocalService distributionLocalService;
	@BeanReference(type = DistributionPersistence.class)
	protected DistributionPersistence distributionPersistence;
	@BeanReference(type = com.liferay.docs.datosGob.service.TituloLocalService.class)
	protected com.liferay.docs.datosGob.service.TituloLocalService tituloLocalService;
	@BeanReference(type = TituloPersistence.class)
	protected TituloPersistence tituloPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}